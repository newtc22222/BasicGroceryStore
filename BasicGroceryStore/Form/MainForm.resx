<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFybnB/goKCmYKCgpmCgoKZgoKCmYKC
        gpmCgoKZgoKCmYKCgpl2dnWMORwcCQAAAAAAAAAAAAAAAAAAAABTT0xKtrWt/dfJt//Xybf/18m3/9fJ
        t//Xybf/wr2y/5uPhP/AsqP/qKKc/2poaHYAAAAAAAAAAAAAAAAAAAAAWlRUXsvEuv/x38f/8d/H//Hf
        x//x38f/8d/H/9DIu/+2qZj/8d/H/7asoP9zc3ODAAAAAAAAAAAAAAAAAAAAAFpUVF7LxLr/8d/H/8rF
        uv/WzsD/1Mq3/+bVvv/QyLv/tqmY/+3cxP+ropf/c3NzgwAAAAAAAAAAAAAAAAAAAABaVFRe2NDD//De
        xv/IvrH/sqyj/7y7s//Sx7b/0Mi7/8q6qP/q18D/qKCW/3Nzc4MAAAAAAAAAAAAAAAAAAAAAWlRUXtjQ
        wv/x38f/8d/H/+XUvv/x38f/8d/H/9DIu//dzbn/8d/H/7asoP9zc3ODAAAAAAAAAAAAAAAAAAAAAGJe
        W7O4srP/p5Ot/87Fuv+nlqz/va+u/8K2rv+aiqz/urCn/66drP+dkpr/cm1tyQAAAAEAAAAAAAAAAAAA
        AAB+eHfKraW014Rwt+3l5OT/iHS26aigtNe3sLjegm3K/9XU0/+RgbTenpOy142Ghd8zMzMFAAAAAAAA
        AAAAAAAAdG5srMO80MyRfM/o/////5SBzuK/t8/Kz8rT04934v/u7u3/oZHN07KozsqGgH7CAAAAAAAA
        AAAAAAAAAAAAAFxUVIuDfIjObF6K1KaiodZuYYnTgXmHzomDi9BqW5TYnpuZ2HNmiNB8cofOZmBepQAA
        AAAAAAAAAAAAAAAAAABXV1V7pKu2/5OZqf+JqKv/jZuS/77Mzv++zM7/vszO/77Mzv++zM7/vszO/2pq
        apUAAAAAAAAAAAAAAAAAAAAAORwcCWJiYJJyc3OkcnNzpHJzc6Ryc3OkcnNzpHJzc6Ryc3OkcnNzpGho
        ZptMQkIbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA8AcAAOAHAADgAwAA4AMAAOADAADgAwAAwAMAAMAD
        AADAAwAAwAMAAOADAADgBwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALR4eES0eHiItHh4iLR4eIi0eHiItHh4iLR4eIi0eHiItHh4iLR4eIi0eHiItHh4iLR4eIi0e
        HiItHh4iLR4eIi0eHiIuJBscAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAkpDQ7J5eXjmjI6N7YyOje2Mjo3tjI6N7YyOje2Mjo3tjI6N7YyOje2Mjo3tjI6N7YyO
        je2Mjo3tjI6N7YyOje2Mjo3tjI6N7YiIiOlRTEvUMCgoIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA/ODVlpamp96Sfl/+8sqX/vLKl/7yypf+8sqX/vLKl/7yypf+8sqX/vLKl/7yy
        pf+8sqX/vLKl/6+xq/9wZ2H/lYyB/5WMgf+VjIH/g3tz/6arqf9MRkW9AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpEQqWws7P/5NK8//Hfx//x38f/8d/H//Hfx//x38f/8d/H//Hf
        x//x38f/8d/H//Hfx//x38f/sa+p/4Z8cP/x38f/8d/H//Hfx//x38f/hoF7/1lVVNUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASkRCqayvrv/q18D/8d/H//Hfx//x38f/8d/H//Hf
        x//x38f/8d/H//Hfx//x38f/8d/H//Hfx/+xr6n/hnxw//Hfx//x38f/8d/H//Hfx/+GgXr/WVZV1gAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKREKprK+u/+rXwP/x38f/8d/H//Hf
        x//x38f/8d/H//Hfx//x38f/8d/H//Hfx//x38f/8d/H/7Gvqf+GfHD/8d/H//Hfx//x38f/8d/H/4aB
        ev9ZVlXWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpEQqmsr67/6tfA//Hf
        x//x38f/ybmm/9nIs//w3sb/8d/H//Hfx//x38f/8d/H//Hfx//x38f/sa+p/4Z8cP/x38f/8d/H//Hf
        x//x38f/hoF6/1lWVdYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASkRCqayv
        rv/q18D/8d/H//Hfx/+oqKP/x87M/6+vq/+sqqT/qqWc/6uhlv+9sZ//8d/H//Hfx/+xr6n/hnxw//Hf
        x//x38f/5dO9/7asnf+GgXr/WVZV1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABKREKpzNDL/+/cxf/x38f/7tzE/5qSjP+cmJP/qaun/8nR0P/m8/P/7/3+/7Gupf/x38f/8d/H/7Gv
        qf+GfHD/8d/H//Hfx//Rwq//n5iQ/4aBev9ZVlXWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEpEQqm3ubL/69rD//Hfx//x38f/8d/H/+3cxP+ej3//no+B/4d7cf+xqJz/vLKi//Hf
        x//x38f/sa+p/8S5qv/x38f/8d/H//Hfx//x38f/hoF6/1lWVdYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAASkRCqa+vqf/q2MH/8d/H//Hfx//x38f/8d/H/+TSvP/Ht6P/8d/H//Hf
        x//x38f/8d/H//Hfx/+xr6n/vrKj//Hfx//x38f/8d/H//Hfx/+GgXr/WVZV1gAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKREKp1NjQ/+/dxf/x38f/8d/H//Hfx//x38f/8d/H//Hf
        x//x38f/8d/H//Hfx//x38f/8d/H/7Gvqf/NwbD/8d/H//Hfx//x38f/8d/H/4aBev9ZVlXWAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKR8fGTgvLt62t7H/4c68/62dl//m1L7/y7uo/8a2
        pf/q18D/rp2X/97Nuv/Swq//vbCe/+3cw/+xoZr/n5yZ/6GWiv+4q5v/7dvD/7annv/OvK7/fnhz/0M9
        OuwtIiJEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3LSzMvru6/MXEwv9uYHn/jnbg/29g
        c//Lycf/1NHQ/29jcP+Odt7/b19+/7m3s//e3tv/cmdt/4tz2v9zZJX/lpKO/+fm5f93bW7/iXLS/3tn
        qv+Dfnv/5OPh/0I5OOMuFxcLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADoyL9jMysn/zMrJ/2pb
        gfB+aMD/bF+B7szKyf/Mysn/cGSA6n5owP9rWov0xMLB/8zKyf93bX/nfmjA/25bo/+wrKv/zMrJ/351
        f+d+aMD/emS4/5SPjvTMysn/TkZF5iYmGhQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMysouubk
        5P//////gXGp45h+8/+DdKfg//////////+JfafZmH7z/4Fusuz39vb//////5SJptSYfvP/h2/R/93b
        2///////npWn1Jh+8/+Ueur/vLm77P////9FOzrbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAsIR90nZiY8/////+BcanjmH7z/4N0p+D//////////4l9p9mYfvP/gW6y7Pf29v//////lImm1Jh+
        8/+Hb9H/3dvb//////+elafUmH7z/5R66v+8ubvs/////zowL88AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACkgIDhrZWLk/////4FxqeOYfvP/g3Sn4P//////////iX2n2Zh+8/+BbrLs9/b2////
        //+UiabUmH7z/4dv0f/d29v//////56Vp9SYfvP/lHrq/7y5u+zPzc39MSclpQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALhcXC0xEQuD/////gXGp45h+8/+DdKfg//////////+JfafZmH7z/4Fu
        suz39vb//////5SJptSYfvP/h2/R/93b2///////npWn1Jh+8/+Ueur/vLm77IqEhOwrICBfAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOzEw3lVRT+RORUzlTUZO5E5GS+ZVUU/kVVFP5E5G
        S+ZNRk7kTEVM5VRPTuRVUU/kTkhM5U1GTuRMRU3lVE9O5VVRT+RPSUzlTUZO5ExGTeRSTE3lPjY17C8h
        ITYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOSUjVvszO/52ir/+LiqD/qbi7/3OW
        m/+4xcb/hJKH/6m2tP++zM7/vszO/77Mzv++zM7/vszO/77Mzv++zM7/vszO/77Mzv++zM7/vszO/77M
        zv93eHnsKyEhLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQ/PL+yvb//jo6j/3x0
        mP+ara7/YJSb/625uv96i3j/m6il/77Mzv++zM7/vszO/77Mzv++zM7/vszO/77Mzv++zM7/vszO/77M
        zv++zM7/vszO/09LSuE5HBwJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANSYmIkhC
        QtVzdXXrgISE9YCEhPWAhIT1gISE9YCEhPWAhIT1gISE9YCEhPWAhIT1gISE9YCEhPWAhIT1gISE9YCE
        hPWAhIT1gISE9XyAgPFSTk7fQjw6YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAC4fHyEtIx4zLSMeMy0jHjMtIx4zLSMeMy0jHjMtIx4zLSMeMy0jHjMtIx4zLSMeMy0j
        HjMtIx4zLSMeMy0jHjMtIx4zKSMdLDMzMwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////AAAP/wAAB/4AAAf+AAAH/gA
        AB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf8AAAD/AAAA/wAAAP+AAAD/gAAA/4AAAf+AAAH/gA
        AB/4AAAf/AAAP///////////////////////////
</value>
  </data>
</root>